CREATE COMPUTE MODULE Routing_using_memory_cache_Compute
CREATE COMPUTE MODULE Routing_using_memory_cache_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN

		-- CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();

		SET OutputLocalEnvironment = InputLocalEnvironment;

		-- Section 1
		DECLARE Variable1 CHAR 'SAMPLE_QUEUES'; -- Hard coded value
		DECLARE Variable2 CHAR;            -- Customer initials
		DECLARE Variable3 CHAR;	        -- Customer surname

		-- Section 2
		DECLARE refToInvoice REFERENCE TO "InputRoot"."XMLNSC"."SaleEnvelope"."SaleList"."Invoice";
		IF lastmove(refToInvoice) THEN
			SET Variable2 = refToInvoice."Initial"[1] ||refToInvoice."Initial"[2]; -- append the two initials together
			SET Variable3 = refToInvoice."Surname";
		ELSE
        	-- Section 3
			SET Variable2 = 'default';
		    SET Variable3 = 'default';
		END IF;

		-- Section 4
		ROUTING : BEGIN ATOMIC -- beginning of atomic block. Processing is single threaded until the END; is reached
			IF CacheQueueTable.valid IS NULL THEN
		 		SET  CacheQueueTable.DestinationData[] =
		       	(
		       		SELECT S.QUEUE_MANAGER, S.QUEUE_NAME ,S.VARIABLE2, S.VARIABLE3
		       		FROM Database.ROUTING_TABLE as S
		       		WHERE
		       			S.VARIABLE1 = Variable1
		       	 );

			SET CacheQueueTable.valid = true;
			END IF;
			-- Section 5

			SET  OutputLocalEnvironment.Destination.MQDestinationList.DestinationData[] =
		          (
		        	SELECT S.QUEUE_MANAGER as queueManagerName, S.QUEUE_NAME as queueName
		        	FROM CacheQueueTable.DestinationData[] as S
		        	WHERE
		        		S.VARIABLE2 = Variable2 and
		        		S.VARIABLE3 = Variable3
		          );
		-- Section 6
		END ROUTING ; -- end of the ROUTING atomic block

		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;